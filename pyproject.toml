[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "human-lens-api"
version = "1.0.0"
description = "Advanced Sociometric & Team Analytics Platform API"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Kookooha Team", email = "tech@kookooha.com"},
]
keywords = [
    "sociometry",
    "team-analytics",
    "surveys",
    "workplace-analytics",
    "mental-health",
    "fastapi",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Office/Business :: Financial",
    "Topic :: Communications :: Email",
]

dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "sqlmodel==0.0.14",
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "python-multipart==0.0.6",
    "sendgrid==6.10.0",
    "jinja2==3.1.2",
    "stripe==7.8.0",
    "apscheduler==3.10.4",
    "pandas==2.1.4",
    "numpy==1.25.2",
    "networkx==3.2.1",
    "scikit-learn==1.3.2",
    "openai==1.3.7",
    "python-dotenv==1.0.0",
    "email-validator==2.1.0",
    "structlog==23.2.0",
    "httpx==0.25.2",
    "sqlite-utils==3.35.2",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "faker==20.1.0",
    "black==23.11.0",
    "isort==5.12.0",
    "ruff==0.1.6",
    "pre-commit==3.6.0",
    "mypy==1.7.1",
    "bandit==1.7.5",
    "safety==2.3.5",
]
test = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "faker==20.1.0",
    "httpx==0.25.2",
]
docs = [
    "mkdocs==1.5.3",
    "mkdocs-material==9.4.8",
    "mkdocstrings[python]==0.24.0",
]

[project.urls]
Homepage = "https://kookooha.com"
Documentation = "https://docs.kookooha.com"
Repository = "https://github.com/kookooha/human-lens-api"
Issues = "https://github.com/kookooha/human-lens-api/issues"

[project.scripts]
human-lens-api = "app.main:main"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["app", "tests"]
skip_glob = ["*/__pycache__", "*/.*"]

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "ARG002", # unused-method-args
    "ARG003", # unused-class-method-args
    "ARG004", # unused-static-method-args
    "ARG005", # unused-lambda-args
    "D",   # pydocstyle
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",   # flake8-quotes
    "UP",  # pyupgrade
    "PT",  # flake8-pytest-style
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D204", # 1 blank line required after class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D215", # Section underline is over-indented
    "D400", # First line should end with a period
    "D401", # First line should be in imperative mood
    "D404", # First word of the docstring should not be This
    "D406", # Section name should end with a newline
    "D407", # Missing dashed underline after section
    "D408", # Section underline should be in the line following the section's name
    "D409", # Section underline should match the length of its name
    "D413", # Missing blank line after last section
    "E501", # Line too long (handled by black)
    "UP007", # Use `X | Y` for type annotations (not compatible with Python 3.12 yet)
]
unfixable = [
    "ARG001", # unused-function-args
    "ARG002", # unused-method-args
    "ARG003", # unused-class-method-args
    "ARG004", # unused-static-method-args
    "ARG005", # unused-lambda-args
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
strict = true

# MyPy configuration
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "sendgrid.*",
    "stripe.*",
    "apscheduler.*",
    "networkx.*",
    "sklearn.*",
    "pandas.*",
    "numpy.*",
    "openai.*",
    "psutil.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = true

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "auth: marks tests related to authentication",
    "api: marks tests related to API endpoints",
    "database: marks tests related to database operations",
    "payments: marks tests related to payment processing",
    "analytics: marks tests related to analytics and data processing",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
